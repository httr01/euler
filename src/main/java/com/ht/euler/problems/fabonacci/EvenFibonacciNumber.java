package com.ht.euler.problems.fabonacci;

import org.junit.Assert;
import org.junit.Test;

/**
 * Ref:https://projecteuler.net/problem=2
 * 
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 * */
public class EvenFibonacciNumber {
	
	public long sumOfevenValueTerms(int maxFaboNumber) {
		int finalSum ;
		int previous_1_term =1;
		int previous_2_term =2;
		long sum =2;
		while (true ) {
			int nextTerm= previous_1_term +previous_2_term;
			if (nextTerm >maxFaboNumber ) break;
			else if (nextTerm % 2 == 0 ) 
					sum +=nextTerm;
			previous_1_term = previous_2_term;
			previous_2_term= nextTerm;
		}
		return sum;
	}
	
	@Test
	public void  test_happypath (){
		long finalSum =sumOfevenValueTerms(4*1000000);
		Assert.assertEquals(4613732, finalSum);
		
	}
	

}
